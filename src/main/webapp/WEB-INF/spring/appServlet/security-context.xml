<?xml	version="1.0"	encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security	http://www.springframework.org/schema/security/spring-security.xsd ">

	<s:http auto-config="true" use-expressions="true">
	<!-- 인터셉터를 이용하여 권한확인 -->
		<s:intercept-url pattern="/sse/friendRequest/*" access="hasAnyRole('USER, ADMIN')"/>
		<s:intercept-url pattern="/sse/connect/*" access="hasAnyRole('USER, ADMIN')"/>
		<s:intercept-url pattern="/chat" access="hasAnyRole('USER, ADMIN')"/>
		<s:intercept-url pattern="/payment/*" access="hasAnyRole('USER, ADMIN')"/>
		<s:intercept-url pattern="/message/*" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/friend/list" access="hasAnyRole('USER, ADMIN')"/>
		<s:intercept-url pattern="/gameBoard/register" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/gameBoard/update" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/member/friends" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/member/profiles" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/member/update" access="hasAnyRole('USER, ADMIN')" />
		
		<s:intercept-url pattern="/purchased/*" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/review/register" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/review/update" access="hasAnyRole('USER, ADMIN')" />
		<s:intercept-url pattern="/wishList/myWishList" access="permitAll" />
		<s:intercept-url pattern="/game/register" access="hasRole('ROLE_ADMIN')" />
		<s:intercept-url pattern="/game/update" access="hasRole('ROLE_ADMIN')" />
		<s:intercept-url pattern="/purchased/check" access="permitAll" />
		<s:intercept-url pattern="/home" access="permitAll" />
		<s:intercept-url pattern="/member/login" access="permitAll" />
		<s:intercept-url pattern="/member/register" access="permitAll" />
		<s:intercept-url pattern="/*/detail" access="permitAll" />
		<s:intercept-url pattern="/*/list" access="permitAll" />
		<s:intercept-url pattern="/resources/*" access="permitAll" />
		
		<s:form-login username-parameter="memberId" password-parameter="password" 
		login-page="/member/login" login-processing-url="/member/login"
		authentication-failure-url="/member/login?error=1" 
		always-use-default-target="false"
		authentication-success-handler-ref="loginSuccessHandler"
		authentication-failure-handler-ref="loginFailureHandler"
		 />
		<s:logout logout-url="/member/logout" invalidate-session="true" delete-cookies="true" 		
		success-handler-ref="logoutSuccessHandler"
		/>
		<s:session-management >
		 	<s:concurrency-control max-sessions="1" />
		</s:session-management>
		
	</s:http>
	<bean id="loginSuccessHandler" class="project.spring.guteam.authentication.LoginSuccessHandler"></bean>
	<bean id="loginFailureHandler" class="project.spring.guteam.authentication.LoginFailureHandler"></bean>
	<bean id="logoutSuccessHandler" class="project.spring.guteam.authentication.LogoutSuccessHandlerImple"></bean>
	
	<bean id="bcryptPasswordEncoder" 
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<s:authentication-manager>
		<s:authentication-provider>
			<s:jdbc-user-service data-source-ref="ds"
			users-by-username-query="select member_id, password, 1 as enabled from member where member_id = ? and deleted = 'N'"
			authorities-by-username-query="select member_id, case when is_admin='Y' then 'ROLE_ADMIN' else 'ROLE_USER' end authority from member where member_id = ? and deleted = 'N'"
			/>
		<s:password-encoder ref="bcryptPasswordEncoder" />
			
		</s:authentication-provider>
	</s:authentication-manager>
	
	
	</beans>